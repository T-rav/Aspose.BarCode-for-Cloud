#import <Foundation/Foundation.h>
#import "ASPBarcodeBuildersList.h"
#import "ASPBarcodeResponseList.h"
#import "ASPBaseResponse.h"
#import "ASPBarcodeReader.h"
#import "ASPObject.h"
#import "ASPApiClient.h"


/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

@interface ASPBarcodeApi: NSObject

@property(nonatomic, assign)ASPApiClient *apiClient;

-(instancetype) initWithApiClient:(ASPApiClient *)apiClient;
-(void) addHeader:(NSString*)value forKey:(NSString*)key;
-(unsigned long) requestQueueSize;
+(ASPBarcodeApi*) apiWithHeader:(NSString*)headerValue key:(NSString*)key;

#pragma mark - Barcode Generation

///
///
/// Generate barcode.
/// 
///
/// @param text The code text.
/// @param type Barcode type.
/// @param format Result format.
/// @param resolutionX Horizontal resolution.
/// @param resolutionY Vertical resolution.
/// @param dimensionX Smallest width of barcode unit (bar or space).
/// @param dimensionY Smallest height of barcode unit (for 2D barcodes).
/// @param enableChecksum Sets if checksum will be generated.
/// 
///
/// @return NSURL*
-(NSNumber*) getBarcodeGenerateWithCompletionBlock :(NSString*) text 
     type:(NSString*) type 
     format:(NSString*) format 
     resolutionX:(NSNumber*) resolutionX 
     resolutionY:(NSNumber*) resolutionY 
     dimensionX:(NSNumber*) dimensionX 
     dimensionY:(NSNumber*) dimensionY 
     enableChecksum:(NSString*) enableChecksum 
    
    completionHandler: (void (^)(NSURL* output, NSError* error))completionBlock;
    


///
///
/// Generate multiple barcodes and return in response stream
/// 
///
/// @param dto List of barcodes
/// @param format Format to return stream in
/// 
///
/// @return NSURL*
-(NSNumber*) postGenerateMultipleWithCompletionBlock :(ASPBarcodeBuildersList*) dto 
     format:(NSString*) format 
    
    completionHandler: (void (^)(NSURL* output, NSError* error))completionBlock;
    


///
///
/// Generate barcode and save on server.
///
///
/// @param name The image name.
/// @param text Barcode&#39;s text.
/// @param type The barcode type.
/// @param format The image format.
/// @param resolutionX Horizontal resolution.
/// @param resolutionY Vertical resolution.
/// @param dimensionX Smallest width of barcode unit (bar or space).
/// @param dimensionY Smallest height of barcode unit (for 2D barcodes).
/// @param codeLocation {CodeLocation} property of the barcode.
/// @param grUnit Measurement of barcode properties.
/// @param autoSize Sets if barcode size will be updated automatically.
/// @param barHeight Height of the bar.
/// @param imageHeight Height of the image.
/// @param imageWidth Width of the image.
/// @param imageQuality Detepmines {ImageQualityMode} of the barcode image.
/// @param rotAngle Angle of barcode orientation.
/// @param topMargin Top margin.
/// @param bottomMargin Bottom margin.
/// @param leftMargin Left margin.
/// @param rightMargin Right margin.
/// @param enableChecksum Sets if checksum will be generated.
/// @param storage Image&#39;s storage.
/// @param folder Image&#39;s folder.
/// @param file
///
///
/// @return ASPBaseResponse*
-(NSNumber*) putBarcodeGenerateFileWithCompletionBlock :(NSString*) name
                                                   text:(NSString*) text
                                                   type:(NSString*) type
                                                 format:(NSString*) format
                                            resolutionX:(NSNumber*) resolutionX
                                            resolutionY:(NSNumber*) resolutionY
                                             dimensionX:(NSNumber*) dimensionX
                                             dimensionY:(NSNumber*) dimensionY
                                           codeLocation:(NSString*) codeLocation
                                                 grUnit:(NSString*) grUnit
                                               autoSize:(NSString*) autoSize
                                              barHeight:(NSNumber*) barHeight
                                            imageHeight:(NSNumber*) imageHeight
                                             imageWidth:(NSNumber*) imageWidth
                                           imageQuality:(NSString*) imageQuality
                                               rotAngle:(NSNumber*) rotAngle
                                              topMargin:(NSNumber*) topMargin
                                           bottomMargin:(NSNumber*) bottomMargin
                                             leftMargin:(NSNumber*) leftMargin
                                            rightMargin:(NSNumber*) rightMargin
                                         enableChecksum:(NSString*) enableChecksum 
                                                storage:(NSString*) storage 
                                                 folder:(NSString*) folder 
                                                   file:(NSURL*) file 

                                      completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;



///
///
/// Generate image with multiple barcodes and put new file on server
/// 
///
/// @param name New filename
/// @param dto List of barcodes
/// @param format Format of file
/// @param folder Folder to place file to
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) putGenerateMultipleWithCompletionBlock :(NSString*) name 
                                                 dto:(ASPBarcodeBuildersList*) dto 
                                              format:(NSString*) format 
                                              folder:(NSString*) folder 

                                   completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;


#pragma mark - Barcode Recognition

///
///
/// Recognize barcode from an url.
/// 
///
/// @param type Barcode type.
/// @param checksumValidation Checksum validation parameter.
/// @param stripFnc Allows to strip FNC symbol in recognition results.
/// @param rotationAngle Recognition of rotated barcode. Possible angles are 90, 180, 270, default is 0
/// @param url The image file url.
/// @param file 
/// 
///
/// @return ASPBarcodeResponseList*
-(NSNumber*) postBarcodeRecognizeFromUrlorContentWithCompletionBlock :(NSString*) type 
     checksumValidation:(NSString*) checksumValidation 
     stripFnc:(NSNumber*) stripFnc 
     rotationAngle:(NSNumber*) rotationAngle 
     url:(NSString*) url 
     file:(NSURL*) file 
    
    completionHandler: (void (^)(ASPBarcodeResponseList* output, NSError* error))completionBlock;



///
///
/// Recognize barcode from a file on server.
/// 
///
/// @param name The image name.
/// @param type The barcode type.
/// @param checksumValidation Checksum validation parameter.
/// @param stripFnc Allows to strip FNC symbol in recognition results.
/// @param rotationAngle Allows to correct angle of barcode.
/// @param barcodesCount Count of barcodes to recognize.
/// @param rectX Top left point X coordinate of {System.Drawing.Rectangle} to recognize barcode inside.
/// @param rectY Top left point Y coordinate of {System.Drawing.Rectangle} to recognize barcode inside.
/// @param rectWidth Width of {System.Drawing.Rectangle} to recognize barcode inside.
/// @param rectHeight Height of {System.Drawing.Rectangle} to recognize barcode inside.
/// @param storage The image storage.
/// @param folder The image folder.
/// 
///
/// @return ASPBarcodeResponseList*
-(NSNumber*) getBarcodeRecognizeWithCompletionBlock :(NSString*) name 
     type:(NSString*) type 
     checksumValidation:(NSString*) checksumValidation 
     stripFnc:(NSNumber*) stripFnc 
     rotationAngle:(NSNumber*) rotationAngle 
     barcodesCount:(NSNumber*) barcodesCount 
     rectX:(NSNumber*) rectX 
     rectY:(NSNumber*) rectY 
     rectWidth:(NSNumber*) rectWidth 
     rectHeight:(NSNumber*) rectHeight 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBarcodeResponseList* output, NSError* error))completionBlock;
    


///
///
/// Recognition of a barcode from file on server with parameters in body.
/// 
///
/// @param name The image name.
/// @param barcodeReader BarcodeReader object with parameters.
/// @param type The barcode type.
/// @param folder The image folder.
/// 
///
/// @return ASPBarcodeResponseList*
-(NSNumber*) putBarcodeRecognizeFromBodyWithCompletionBlock :(NSString*) name 
     barcodeReader:(ASPBarcodeReader*) barcodeReader 
     type:(NSString*) type 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBarcodeResponseList* output, NSError* error))completionBlock;
    



@end
